{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "53f85169-8af1-4851-98c3-cad91f9d9262",
   "metadata": {},
   "source": [
    "# Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3427b9ce-702d-48d1-8769-31e6733fbad0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\Aman Sinha\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import tensorflow # Main DL library\n",
    "from tensorflow.keras.models import Sequential # Model type: Sequential layers\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense # CNN layers\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator # For loading and Augmenting image"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfafdf44-72e4-4c46-98fd-1a352f0fc640",
   "metadata": {},
   "source": [
    "## Prepare Image Data (Dataset link https://www.kaggle.com/datasets/pushpakhinglaspure/cats-vs-dogs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4c6f0b0a-a60f-4a43-9176-a298007d11cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 16000 images belonging to 2 classes.\n",
      "Found 16000 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "train_datagen= ImageDataGenerator(rescale=1./225, validation_split=0.2) # Normalize and Split Train/Val\n",
    "# train Data\n",
    "train_data= train_datagen.flow_from_directory(\n",
    "    r'C:\\Users\\Aman Sinha\\Downloads\\dogs_vs_cats\\train', # Folder containg dogs and casts subfolders\n",
    "    target_size=(150,150), # Resize all images to 150x150\n",
    "    batch_size= 100, # Process 10 images at a time\n",
    "    class_mode = 'binary',  #Binary classification (dog vs Cat)\n",
    "    subset = 'training' # use this for training data\n",
    ")\n",
    "\n",
    "\n",
    "# Validation Data\n",
    "val_data= train_datagen.flow_from_directory(\n",
    "    r'C:\\Users\\Aman Sinha\\Downloads\\dogs_vs_cats\\train', # Folder containg dogs and casts subfolders\n",
    "    target_size=(150,150), # Resize all images to 150x150\n",
    "    batch_size= 100, # Process 100 images at a time\n",
    "    class_mode = 'binary', #Binary classification (dog vs Cat)\n",
    "    subset = 'training' # use this for Validation data\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a87e559-6cfc-4f19-b81c-00c83dd1c01c",
   "metadata": {},
   "source": [
    "## Build CNN model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4a6426a8-6018-4e6e-96cb-909ae152de7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\Aman Sinha\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\Aman Sinha\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\layers\\pooling\\max_pooling2d.py:161: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model = Sequential() # Linear Stack of Layers\n",
    "\n",
    "# First Conv Layer : Detect edges\n",
    "model.add(Conv2D(32,(3,3), activation = 'relu', input_shape=(150,150,3))) # Conv2D: 32 filters, 3x3 size, RELU= activation\n",
    "# input_shape = height, width, channels(3 for RGB)\n",
    "model.add(MaxPooling2D(pool_size=(2,2))) # DownSamples by 2x2 blocks\n",
    "\n",
    "# Second Conv Layer: Detects more complex features\n",
    "model.add(Conv2D(64,(3,3), activation = 'relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "\n",
    "# Flatten + Fully Connected Layer\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation ='relu')) # 128 neurons, RELU for non-linearity\n",
    "model.add(Dense(1, activation ='sigmoid')) # 1 neuron for binary output (Dog vs Cat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30f31b7f-e54a-498a-b0af-8506bead34c8",
   "metadata": {},
   "source": [
    "## Complie the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "36b7b9fe-dd57-49a5-9399-865b87a52323",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true,
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\Aman Sinha\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\optimizers\\__init__.py:309: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model.compile(optimizer = 'adam', # Adaptive optimizer (adjusts learning rate)\n",
    "              loss= 'binary_crossentropy', # Binary loss\n",
    "              metrics = ['accuracy']) # Shows accuracy during training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3657bef-e922-411e-a6d4-f2912e7e02b0",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "source": [
    "# Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fd34678c-28e0-4fb7-a5a0-a9d7dc9a30e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "160/160 [==============================] - 392s 2s/step - loss: 0.5883 - accuracy: 0.6800 - val_loss: 0.5278 - val_accuracy: 0.7318\n",
      "Epoch 2/5\n",
      "160/160 [==============================] - 245s 2s/step - loss: 0.4827 - accuracy: 0.7641 - val_loss: 0.4058 - val_accuracy: 0.8306\n",
      "Epoch 3/5\n",
      "160/160 [==============================] - 248s 2s/step - loss: 0.3903 - accuracy: 0.8236 - val_loss: 0.3040 - val_accuracy: 0.8772\n",
      "Epoch 4/5\n",
      "160/160 [==============================] - 255s 2s/step - loss: 0.3136 - accuracy: 0.8679 - val_loss: 0.2099 - val_accuracy: 0.9241\n",
      "Epoch 5/5\n",
      "160/160 [==============================] - 261s 2s/step - loss: 0.2095 - accuracy: 0.9197 - val_loss: 0.1335 - val_accuracy: 0.9680\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    train_data,\n",
    "    validation_data = val_data,\n",
    "    epochs=5\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c1a6906-0454-4464-82f0-2187e5f38745",
   "metadata": {},
   "source": [
    "## Evaluate the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3984f16b-c656-4d27-8a46-6f2e7645d466",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "160/160 [==============================] - 71s 444ms/step - loss: 0.1335 - accuracy: 0.9680\n",
      "Validation Accuracy: 0.9679999947547913\n"
     ]
    }
   ],
   "source": [
    "loss, acc = model.evaluate(val_data)\n",
    "print(f\"Validation Accuracy: {acc}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe43ead9-940c-4a3d-b209-4d5e584031d6",
   "metadata": {},
   "source": [
    "# Visualize Accuracy and Loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "007fac0a-72a1-4b02-b0bb-79ceb233f70c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(history.history['accuracy'], label = 'Train Acc')\n",
    "plt.plot(history.history['val_accuracy'], label='Val Acc')\n",
    "plt.legend()\n",
    "plt.title(\"Accuracy Curve\")\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4974c5ed-efbf-4ee7-8418-4cb2bc0308f0",
   "metadata": {},
   "source": [
    "Trained a CNN model for binary classification using a dataset of X images. Using data augmentation and a sequential CNN architecture with Conv2D and MaxPooling layers, the model reached ~97% validation accuracy in 5 epochs without overfitting. Used ImageDataGenerator for splitting, and tracked performance via validation loss. This shows the model’s ability to generalize well to unseen data.”"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1746a642-ee56-4771-a139-f49be852455e",
   "metadata": {},
   "source": [
    "## Checking on test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cb3ffaa2-5891-4579-a59f-d45171996bd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 5000 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "    r'C:\\Users\\Aman Sinha\\Downloads\\dogs_vs_cats\\test',             \n",
    "    target_size=(150, 150),# Resize all images to this size\n",
    "    batch_size=32,\n",
    "    class_mode='binary',   #  Use 'categorical' if >2 classes\n",
    "    shuffle=False          #  Do NOT shuffle so that labels match prediction order\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "335e9689-2d63-4d0c-a4ab-730c0cb87d18",
   "metadata": {},
   "source": [
    "## Evaluate the Model on Test Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "af9a3aae-f64b-4f8d-8628-0b46eb4299b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "157/157 [==============================] - 127s 813ms/step - loss: 0.4858 - accuracy: 0.7858\n",
      "Test Loss: 0.4858211874961853\n",
      "Test Accuracy: 0.7857999801635742\n"
     ]
    }
   ],
   "source": [
    "loss, accuracy = model.evaluate(test_generator)\n",
    "print(\"Test Loss:\", loss)\n",
    "print(\"Test Accuracy:\", accuracy)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3123cfed-7029-4250-96fc-c3510e575a54",
   "metadata": {},
   "source": [
    "Test accuracy is ~78.6%, which suggests some room for generalization improvement. To improve this, I’d consider tuning the network architecture, applying data augmentation, or switching to transfer learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85ea5941-bf16-4d40-b004-777253610b9b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
