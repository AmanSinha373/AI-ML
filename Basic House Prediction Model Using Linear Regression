{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7c3df91f-aab0-4551-a388-1f0b1e5380c1",
   "metadata": {},
   "source": [
    "House Price Prediction Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5d95e16b-8757-4dd3-a9f2-ecc5d78d54ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Path to dataset files: C:\\Users\\Aman Sinha\\.cache\\kagglehub\\datasets\\jenilhareshbhaighori\\house-price-prediction\\versions\\1\n"
     ]
    }
   ],
   "source": [
    "import kagglehub\n",
    "\n",
    "# Download latest version\n",
    "path = kagglehub.dataset_download(\"jenilhareshbhaighori/house-price-prediction\")\n",
    "\n",
    "print(\"Path to dataset files:\", path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "60dfa8b3-4697-487c-bf14-74b01322a555",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing necessary libraries required for Liner Regression\n",
    "import pandas as pd     #  pandas is used for handling tabular data (dataframes)\n",
    "import numpy as np      #  numpy is used for numerical operations, like math calculations\n",
    "import matplotlib.pyplot as plt  #  for plotting graphs (visualizations)\n",
    "import seaborn as sns   #  for prettier graphs and charts\n",
    "from sklearn.linear_model import LinearRegression  #  The ML model: Linear Regression\n",
    "from sklearn.model_selection import train_test_split  # Split our data for training and testing\n",
    "from sklearn.metrics import mean_squared_error, r2_score  #  Metrics to check how good our model is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "60796eef-fe53-4e9c-85f4-e9c77f1e09f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>property_name</th>\n",
       "      <th>property_type</th>\n",
       "      <th>society</th>\n",
       "      <th>price</th>\n",
       "      <th>price_per_sqft</th>\n",
       "      <th>area</th>\n",
       "      <th>areaWithType</th>\n",
       "      <th>bedRoom</th>\n",
       "      <th>bathroom</th>\n",
       "      <th>balcony</th>\n",
       "      <th>additionalRoom</th>\n",
       "      <th>address</th>\n",
       "      <th>floorNum</th>\n",
       "      <th>facing</th>\n",
       "      <th>agePossession</th>\n",
       "      <th>nearbyLocations</th>\n",
       "      <th>description</th>\n",
       "      <th>furnishDetails</th>\n",
       "      <th>features</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5 Bedroom House for sale in Sector 70A Gurgaon</td>\n",
       "      <td>house</td>\n",
       "      <td>bptp visionnaire</td>\n",
       "      <td>5.25</td>\n",
       "      <td>20115.0</td>\n",
       "      <td>2610.0</td>\n",
       "      <td>Plot area 290(242.48 sq.m.)</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3+</td>\n",
       "      <td>servant room</td>\n",
       "      <td>29b, Sector 70A Gurgaon, Gurgaon, Haryana</td>\n",
       "      <td>3.0</td>\n",
       "      <td>North-East</td>\n",
       "      <td>0 to 1 Year Old</td>\n",
       "      <td>['Good Earth City Center 2', 'Kunskapsskolan I...</td>\n",
       "      <td>Do you wish to buy an independent house in sec...</td>\n",
       "      <td>['1 Wardrobe', '1 Fan', '1 Exhaust Fan', '1 Ge...</td>\n",
       "      <td>['Feng Shui / Vaastu Compliant', 'Private Gard...</td>\n",
       "      <td>['Environment5 out of 5', 'Lifestyle4 out of 5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5 Bedroom House for sale in Sector 21A Faridabad</td>\n",
       "      <td>house</td>\n",
       "      <td>independent</td>\n",
       "      <td>5.70</td>\n",
       "      <td>105751.0</td>\n",
       "      <td>539.0</td>\n",
       "      <td>Plot area 539(50.07 sq.m.)</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>store room,pooja room,servant room</td>\n",
       "      <td>Sector 21A Faridabad, Gurgaon, Haryana</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5 to 10 Year Old</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Hi, we have an independent house/villa availab...</td>\n",
       "      <td>['1 Water Purifier', '5 Fan', '1 Exhaust Fan',...</td>\n",
       "      <td>['Private Garden / Terrace', 'Park', 'Visitor ...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10 Bedroom House for sale in Sushant Lok Phase 1</td>\n",
       "      <td>house</td>\n",
       "      <td>independent</td>\n",
       "      <td>2.10</td>\n",
       "      <td>38251.0</td>\n",
       "      <td>549.0</td>\n",
       "      <td>Plot area 61(51 sq.m.)</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>3+</td>\n",
       "      <td>servant room</td>\n",
       "      <td>Sushant Lok Phase 1, Gurgaon, Haryana</td>\n",
       "      <td>5.0</td>\n",
       "      <td>West</td>\n",
       "      <td>0 to 1 Year Old</td>\n",
       "      <td>['Sector 42-43 metro station', 'Huda city cent...</td>\n",
       "      <td>Monthly rental income is rs1,40,000/- Best opt...</td>\n",
       "      <td>['10 Bed', '3 Fan', '10 Geyser', '2 Light', 'N...</td>\n",
       "      <td>['Maintenance Staff', 'Water Storage', 'Visito...</td>\n",
       "      <td>['Environment5 out of 5', 'Lifestyle5 out of 5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21 Bedroom House for sale in Sector 54 Gurgaon</td>\n",
       "      <td>house</td>\n",
       "      <td>independent</td>\n",
       "      <td>5.00</td>\n",
       "      <td>43066.0</td>\n",
       "      <td>1161.0</td>\n",
       "      <td>Plot area 129(107.86 sq.m.)</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>3+</td>\n",
       "      <td>servant room</td>\n",
       "      <td>Sector 54 Gurgaon, Gurgaon, Haryana</td>\n",
       "      <td>5.0</td>\n",
       "      <td>North</td>\n",
       "      <td>1 to 5 Year Old</td>\n",
       "      <td>['Sector 53-54 metro station', 'Sector 54 chow...</td>\n",
       "      <td>129 sq yd plot size. 5 floors built up , fully...</td>\n",
       "      <td>['1 Water Purifier', '21 Fan', '1 Fridge', '1 ...</td>\n",
       "      <td>['Feng Shui / Vaastu Compliant', 'Private Gard...</td>\n",
       "      <td>['Environment4 out of 5', 'Lifestyle5 out of 5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12 Bedroom House for sale in Sushant Lok Phase 1</td>\n",
       "      <td>house</td>\n",
       "      <td>independent</td>\n",
       "      <td>3.00</td>\n",
       "      <td>53763.0</td>\n",
       "      <td>558.0</td>\n",
       "      <td>Plot area 62(51.84 sq.m.)</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>3+</td>\n",
       "      <td>others</td>\n",
       "      <td>1228, Sushant Lok Phase 1, Gurgaon, Haryana</td>\n",
       "      <td>5.0</td>\n",
       "      <td>West</td>\n",
       "      <td>Within 6 months</td>\n",
       "      <td>['Sector 42-43 metro station', 'Huda city cent...</td>\n",
       "      <td>Best for investment purpose. Fully furnished b...</td>\n",
       "      <td>['1 Water Purifier', '1 Fridge', '12 Fan', '1 ...</td>\n",
       "      <td>['Maintenance Staff', 'Water Storage', 'Visito...</td>\n",
       "      <td>['Environment5 out of 5', 'Lifestyle5 out of 5...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      property_name property_type  \\\n",
       "0    5 Bedroom House for sale in Sector 70A Gurgaon         house   \n",
       "1  5 Bedroom House for sale in Sector 21A Faridabad         house   \n",
       "2  10 Bedroom House for sale in Sushant Lok Phase 1         house   \n",
       "3    21 Bedroom House for sale in Sector 54 Gurgaon         house   \n",
       "4  12 Bedroom House for sale in Sushant Lok Phase 1         house   \n",
       "\n",
       "            society  price  price_per_sqft    area  \\\n",
       "0  bptp visionnaire   5.25         20115.0  2610.0   \n",
       "1       independent   5.70        105751.0   539.0   \n",
       "2       independent   2.10         38251.0   549.0   \n",
       "3       independent   5.00         43066.0  1161.0   \n",
       "4       independent   3.00         53763.0   558.0   \n",
       "\n",
       "                  areaWithType  bedRoom  bathroom balcony  \\\n",
       "0  Plot area 290(242.48 sq.m.)        5         4      3+   \n",
       "1   Plot area 539(50.07 sq.m.)        5         4       2   \n",
       "2       Plot area 61(51 sq.m.)       10        10      3+   \n",
       "3  Plot area 129(107.86 sq.m.)       21        21      3+   \n",
       "4    Plot area 62(51.84 sq.m.)       12        12      3+   \n",
       "\n",
       "                       additionalRoom  \\\n",
       "0                        servant room   \n",
       "1  store room,pooja room,servant room   \n",
       "2                        servant room   \n",
       "3                        servant room   \n",
       "4                              others   \n",
       "\n",
       "                                       address  floorNum      facing  \\\n",
       "0    29b, Sector 70A Gurgaon, Gurgaon, Haryana       3.0  North-East   \n",
       "1       Sector 21A Faridabad, Gurgaon, Haryana       2.0         NaN   \n",
       "2        Sushant Lok Phase 1, Gurgaon, Haryana       5.0        West   \n",
       "3          Sector 54 Gurgaon, Gurgaon, Haryana       5.0       North   \n",
       "4  1228, Sushant Lok Phase 1, Gurgaon, Haryana       5.0        West   \n",
       "\n",
       "      agePossession                                    nearbyLocations  \\\n",
       "0   0 to 1 Year Old  ['Good Earth City Center 2', 'Kunskapsskolan I...   \n",
       "1  5 to 10 Year Old                                                NaN   \n",
       "2   0 to 1 Year Old  ['Sector 42-43 metro station', 'Huda city cent...   \n",
       "3   1 to 5 Year Old  ['Sector 53-54 metro station', 'Sector 54 chow...   \n",
       "4   Within 6 months  ['Sector 42-43 metro station', 'Huda city cent...   \n",
       "\n",
       "                                         description  \\\n",
       "0  Do you wish to buy an independent house in sec...   \n",
       "1  Hi, we have an independent house/villa availab...   \n",
       "2  Monthly rental income is rs1,40,000/- Best opt...   \n",
       "3  129 sq yd plot size. 5 floors built up , fully...   \n",
       "4  Best for investment purpose. Fully furnished b...   \n",
       "\n",
       "                                      furnishDetails  \\\n",
       "0  ['1 Wardrobe', '1 Fan', '1 Exhaust Fan', '1 Ge...   \n",
       "1  ['1 Water Purifier', '5 Fan', '1 Exhaust Fan',...   \n",
       "2  ['10 Bed', '3 Fan', '10 Geyser', '2 Light', 'N...   \n",
       "3  ['1 Water Purifier', '21 Fan', '1 Fridge', '1 ...   \n",
       "4  ['1 Water Purifier', '1 Fridge', '12 Fan', '1 ...   \n",
       "\n",
       "                                            features  \\\n",
       "0  ['Feng Shui / Vaastu Compliant', 'Private Gard...   \n",
       "1  ['Private Garden / Terrace', 'Park', 'Visitor ...   \n",
       "2  ['Maintenance Staff', 'Water Storage', 'Visito...   \n",
       "3  ['Feng Shui / Vaastu Compliant', 'Private Gard...   \n",
       "4  ['Maintenance Staff', 'Water Storage', 'Visito...   \n",
       "\n",
       "                                              rating  \n",
       "0  ['Environment5 out of 5', 'Lifestyle4 out of 5...  \n",
       "1                                                NaN  \n",
       "2  ['Environment5 out of 5', 'Lifestyle5 out of 5...  \n",
       "3  ['Environment4 out of 5', 'Lifestyle5 out of 5...  \n",
       "4  ['Environment5 out of 5', 'Lifestyle5 out of 5...  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(r\"C:\\Users\\Aman Sinha\\.cache\\kagglehub\\datasets\\jenilhareshbhaighori\\house-price-prediction\\versions\\1\\house_cleaned.csv\")\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "10f22b70-1e4b-4b32-83e6-74602c78c7d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove rows with nulls in important numeric columns\n",
    "data = df[['price', 'area', 'bedRoom', 'bathroom', 'floorNum']].dropna()\n",
    "data = data[data['area'] < 20000] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "6208e8e5-14da-4048-886d-affbac2590f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>area</th>\n",
       "      <th>bedRoom</th>\n",
       "      <th>bathroom</th>\n",
       "      <th>floorNum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.25</td>\n",
       "      <td>2610.0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.70</td>\n",
       "      <td>539.0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.10</td>\n",
       "      <td>549.0</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.00</td>\n",
       "      <td>1161.0</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.00</td>\n",
       "      <td>558.0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   price    area  bedRoom  bathroom  floorNum\n",
       "0   5.25  2610.0        5         4       3.0\n",
       "1   5.70   539.0        5         4       2.0\n",
       "2   2.10   549.0       10        10       5.0\n",
       "3   5.00  1161.0       21        21       5.0\n",
       "4   3.00   558.0       12        12       5.0"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526105ce-b4b8-41c8-a280-558cdf863b98",
   "metadata": {},
   "source": [
    "Splitting into X and y (features and Labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "161f6f30-6691-4bce-be0f-768cb5f386c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# X= input and y = output\n",
    "X = df[['area', 'bedRoom', 'bathroom', 'floorNum']]  #Input features\n",
    "y= data['price'] # This is what we want to predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "4a0aa037-283d-4031-8cad-9335917d99ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42) #test size - 0.2 means 20% data for testing and Random state - 42- fixed seed for reproduction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d29c56b8-de8f-4172-b9bd-0dbe9259f151",
   "metadata": {},
   "source": [
    "Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ac6b2473-cb5d-4e2b-b5d7-043149f00617",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model= LinearRegression() # Create a linear regresssion model object\n",
    "model.fit(X_train, y_train) #Trainging it using training data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be12d51c-b9f6-4812-a5ca-4d30ff6d3567",
   "metadata": {},
   "source": [
    "Predict and Evalualte"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "f2df19cd-89a1-4481-9e5c-64db5ab028ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predict prices for test data\n",
    "y_pred = model.predict(X_test) # Predict values using test inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "03087c4e-e6af-4780-9d2b-2250d803339f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Square Error 9.694173982202779\n",
      "R^2 Score 0.4940056700997211\n"
     ]
    }
   ],
   "source": [
    "#Evaluate how good our predictions are\n",
    "mse=mean_squared_error(y_test,y_pred) # lower is better\n",
    "r2 = r2_score(y_test,y_pred) # R^2 score - 1 = perfect prediction\n",
    "print(\"Mean Square Error\", mse)\n",
    "print(\"R^2 Score\", r2) # Closer to 1 is better"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "3b754b7b-121b-4dd0-b330-02db6c91cddd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualize the Regression Line\n",
    "# Visualize the Regression Line using just 'area' feature\n",
    "plt.scatter(X_test['area'], y_test, color='blue')  # Actual prices vs area\n",
    "plt.plot(X_test['area'], y_pred, color='red')      # Predicted prices vs area\n",
    "\n",
    "plt.xlabel('Area')          \n",
    "plt.ylabel('Price')         \n",
    "plt.title(\"House Price Prediction (Actual vs Predicted)\")\n",
    "\n",
    "#  Show the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "6f45d4e2-41fa-4c3a-931c-7c00190c2184",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0kAAAIjCAYAAADWYVDIAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAmrVJREFUeJzt3QeYU2XaxvF76L036UWqgCgqYsEuthUUe8Nde8eun30tqOjalVXX3iv2QhEQRRAVrHSQolSFobfJdz3ncCYnmSSTmUkm7f+7rjCT5ExyUmY4d573fd68QCAQEAAAAADAUcH9AgAAAAAwhCQAAAAA8CEkAQAAAIAPIQkAAAAAfAhJAAAAAOBDSAIAAAAAH0ISAAAAAPgQkgAAAADAh5AEAAAAAD6EJAAoo7FjxyovL8/5mktuvfVW53H7tW3bVmeeeWbC7sNuy24zVSZPnqwqVaro999/VzZ47rnnnNds/vz5ymX2+O15sOcj1vs53fbxuuuuU58+fVK6X0CuICQBKPaAasqUKRGv33///dW9e3dlOnuM3qlChQpq3ry5Dj300LQPPZm63+H++OMP5wB16tSpSjc33HCDTj75ZLVp0ybi9XvssYfz/D/xxBOlvo+PP/7Yefy5xMKv//1bp04d7bzzzrr//vu1adMmZZLHH388JMgk05AhQzRt2jS9//775XJ/QC4jJAGApEMOOUQvvviinn/+eZ1//vn68ccfdeCBB+qTTz4p9mf79eunDRs2OF8zab+TYcaMGXrqqadKHJJuu+22iCHJbstuMxVsf0aNGuU8r5HMmjVL3377rVPpevnll8sUkuzx55qqVas671073XXXXWrQoIGuuuoqDR48OCX7c+ONNzq/x+kckpo1a6YBAwbovvvuK5f7A3JZpVTvAACkg06dOum0004rPH/MMceoZ8+eevDBB3X44YdH/JmNGzc6Q7GsilOtWjVl4n4n48A3kSpXrqxUefbZZ9W6dWvtueeeEa9/6aWX1KRJE6f6cdxxxznDo1I5NDDTVKpUKeS9e+GFFzpDyV5//XX95z//cSqj4QKBgPP+rV69elL2x07p7oQTTtDxxx+vuXPnqn379qneHSBrUUkCkFBbt27V7bffrg4dOjgHzHbQ+H//939FhtDYEJtIQ4zC57Rs2bLF+ZS9Y8eOThBp2LCh9tlnH40cOTLk56ZPn+4cqNqn0bbdbrvtVqYhKT169FCjRo00b968kHlHr732mvOJc4sWLVSjRg3l5+dHnZM0adIkHXHEEapfv75q1qzphJeHHnoobfbb28fDDjtMdevWdS7fb7/99NVXXxW53QkTJmj33Xd39tFe2//+978R7z/SnKRVq1bp8ssvd66z90TLli11xhlnaMWKFc7+2e2af/7zn4XDr7xP5iPNSVq3bp2uvPJKtWrVyrm9zp07O5+s2wG0n93OxRdfrBEjRjjDQm3bnXbaSZ9++mlcz6X9nFXlos1TeeWVV5zX7qijjnKePzsfSaz3gT2+xx57rHB/vZOJ9r6KNFfFKoh2W3bQbK+RVRz+9a9/aeXKlSopey7t9iPNw7r++uudgP33338XVtMGDRrk3J/dr722J510klavXl3i+7XQbkN4vcdo7LW35/ezzz5zfjcsHHnvPXtf2fAz732w44476p577lFBQUHI7dp29tzYa1SvXj2nUmWXhYs2J8nCsA2rtN8Pew2tYvz5558X7t8vv/yicePGFb523mNIxj6agw8+2Pn63nvvlfg5BhC/9P/IBEDK2QGPHdCGswAT7uyzz3aGftnBox3I2gHi0KFD9dtvv+ndd98t8X3bgYv9vN2uHajYwb3Nkfr++++doWbGDlL23ntvJwDYxGY7EH3jjTc0cOBAvf322051paTsINBOdlDjZwHQDhJtWJAFP/s+EgtxdnC3ww476LLLLnMOIu05+PDDD53z6bDfY8aMcapNvXv31i233OIcpFr1xILBl19+6Tzf5qeffnLmOjVu3Nh5PSwI2/ZNmzYtdn/Wrl2rfffd13nsdtC+6667Ou8lC4KLFi1S165d9e9//1s333yzzj33XGdbs9dee0W8PQtCRx99tL744gudddZZ6tWrl3MAffXVV2vx4sV64IEHioS7d955x6lS1K5dWw8//LBzUL9gwQIncEdjt2Xb2P5GYu/r2bNnO8+XPZfHHnusM+TOPhAoyfvgvPPOc4Yb2nY27Ky07OetsmBB0+7D3ltPPvmk8/Wbb74pUUMCq1Rcc801znvRnlc/u8zeCxYWNm/erP79+zvvp0suucS5X3ve7LHZAb4d8JfUnDlznK/+18aGW9q8MHuuzjnnHCcUr1+/3gn0dn92uVX8vv76ayfE/fnnn04l1Xu/2PA0ex/YsEl7v9nfoXiH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OsrZxm5v33331Zw5cwqvf/rpp9W1a1dVq1ZNXbp00eOPP16CVw4AAADpjo/P/davl2rVSs19r10r1axZ6h+3MLBy5crC86NHj3YO8keOHOmc37Jli/r376++ffvqyy+/dCond9xxh1OR+vHHH51he/fff7+ee+45PfPMM04IsPPvvvuuDjzwwKj3a4Fj4sSJevjhh52wM2/ePK1YscIJTW+//bYGDRqkGTNmOPti+2gsIL300ksaPny4OnbsqPHjx+u0005T48aNtd9++zlh7thjj9VFF13kBJkpU6Y41bKSssdYuXLlkErafffdp5tvvlm33HJLxJ9ZvHix+vXr54TBMWPGOPv91VdfFQ5lfPnll52ff/TRR7XLLrs4FatzzjnHGd43ePDgEu8jAAAA0g8hKcNZpccC0WeffaZLLrmk8HI7aLeKh4UfY6HEKjh2mVVOzLPPPutUjWzu0KGHHqoHH3xQ119/vRNQjIUYu91oZs6cqTfeeMMJYlbJMu3bty+83qpVpkmTJs79eJWnu+66S6NGjXICm/czEyZM0H//+18nJD3xxBPq0KGDE9KMVcJ++ukn3XPPPXE/LxaM7OdXr14dEvLse3/gCq9QWfWpbt26eu2115yAZawq5bFwZbfrPUdWDfv111+dfSckxWfbNunLL6U//5R22EHad1+pYsVU7xUAAEAQIcmvRg23opOq+y6BDz/8ULVq1XIqRBZ+TjnlFGdekqdHjx6FAclMmzZNs2fPLjKfaOPGjc5QMgsTNpenT58+IZWY3XbbrciQO48NUbM5PRZs4mX7sH79eh1yyCFFQo1VZsxvv/0Wsh/GC1TFsaF/N954o/O47Pm5++67deSRRxZeb48nFntMNrzOC0h+69atc56rs846y6keeazKZMEKxXvnHemyy6RFi4KXtWwpPfSQtD13AgAApBwhyc8qLGUY8laebJ6OVVwsCNm8o/DGA1ZJ8lu7dq169+7tDBcLZ8PcSsMbPlcSth/mo48+UosWLUKuszlNZXX11Vc7c58sIDVt2rSwahbteSnJY/L2/amnnioS4iwsoviAdNxxRaffLV7sXm7T0ghKAAAgHRCSMpQd7FuThHhZO+zXX3/dGfpm82wi2WGHHTRp0iRnTo5XIfnuu++cn43EqlVWxRo3blzhcDs/r5JlDSE83bp1c8LQggULolagbD6U14TC880338T1OBs1alSi5yVcz5499fzzzzsVuvBqkoUuC6Rz587VqaeeWur7yEX2FrAKUqSipF1mWdb6gQwYwNA7AACQenS3yxF2UG8BwjraWeMGa7Bgc5EuvfRSLdo+9umyyy5zhqeNGDFC06dP14UXXhhzjSPrFmfzcP71r385P+Pdps1TMtZ5zyo5NjRw+fLlTiXGhvtdddVVuvzyy50wYsPXvv/+ez3yyCPOeXP++ec7rc2tKmRNH1555RWnoUR5uPjii5Wfn6+TTjrJaRhh+/Hiiy86+2Fuu+02p/GENaqwOVk2V8rmdv3nP/8pl/3LVDYHyT/ELlJQWrjQ3Q4AACDVCEk5okaNGk4XudatWztNB6xaY3NrbO6OV1myhgann366E3xsDpAFmmOOOSbm7dqQv+OOO84JVNYO2+bq2NwdY8PpLFRcd911ThXGAoixNtw33XSTEzZsP6zDng2/syYIxvbROuNZ8LKOedZAwpo9lAdrfW5d7SzQWaXLhija8DqvqnT22Wc7zS8sGFklzbaxAOftOyKzJg2J3A4AACCZ8gLRZuVnCasK2KR6a0wQPszMAoJVP+wA19a8ARKN95hr7FibR1f8dl98YWtxlcceAQCAXJQfIxv4UUkCkHTW5tu62IX10Shkl7dq5W4HAACQaoQkAElnzRiszbcJD0re+QcfpGkDAABID4QkAOXC2ntbm++wzu9OhYn23wAAIJ3QAhxAubEgZG2+rYudNWnYYQd3iB0VJAAAkE4ISU774azuXYEU4r1VlAUimjMAAIB0ltPD7by2zuvXr0/1riBLbd682flakVIJAABAxsjpSpIduNarV0/Lli0rXEvIFj8FEqGgoMBZRNfeV5Uq5fSvGgAAQEbJ+SO3Zs2aOV+9oAQkUoUKFZzFcQnfAAAAmSPnQ5IdvO6www5q0qSJtmzZkurdQZapUqWKE5QAAACQOVIakoYOHap33nlH06dPV/Xq1bXXXnvpnnvuUefOnQu32X///TVu3LiQnzvvvPM0fPjwhA+9Y94IAAAAgJR+xG3h56KLLtI333yjkSNHOpWcQw89VOvWrQvZ7pxzztGff/5ZeLr33ntTts8AAAAAsltKK0mffvppyPnnnnvOGfb23XffqV+/foWX28R3b+4QAAAAACRTWk2WWL16tfO1QYMGIZe//PLLatSokbp3767rr78+ZsvuTZs2KT8/P+QEAAAAABnXuMHaJQ8ZMkR77723E4Y8p5xyitq0aaPmzZvrxx9/1LXXXqsZM2Y4c5mizXO67bbbynHPAQAAAGSTvEAgEFAauOCCC/TJJ59owoQJatmyZdTtxowZo4MOOkizZ89Whw4dIlaS7OSxSlKrVq2cKlWdOnWStv8AAAAA0ptlg7p16xabDdKiknTxxRfrww8/1Pjx42MGJNOnTx/na7SQVLVqVecEAAAAAKWR0pBkRaxLLrlE7777rsaOHat27doV+zNTp051vtraRgAAAACQVSHJ2n+/8soreu+991S7dm0tWbLEudxKYLZu0pw5c5zrjzjiCDVs2NCZk3T55Zc7ne969uyZyl0HAAAAkKVSOicpLy8v4uXPPvuszjzzTC1cuFCnnXaafv75Z2ftJJtbdMwxx+jGG2+Me35RvOMOAQAAAGS3jJiTVFw+s1BkC84CAAAAQE6ukwQAAAAAqUZIAgAAAAAfQhIAAAAA+BCSAAAAAMCHkAQAAAAAPoQkAAAAAPAhJAEAAACADyEJAAAAAHwISQAAAADgQ0gCAAAAAB9CEgAAAAD4EJIAAAAAwIeQBAAAAAA+hCQAAAAA8CEkAQAAAIAPIQkAAAAAfAhJAAAAAOBDSAIAAAAAH0ISAAAAAPgQkgAAAADAh5AEAAAAAD6EJAAAAADwISQBAAAAgA8hCQAAAAB8CEkAAAAA4ENIAgAAAAAfQhIAAAAA+BCSAAAAAMCHkAQAAAAAPoQkAAAAAPAhJAEAAACADyEJAAAAAHwISQAAAADgQ0gCAAAAAB9CEgAAAAD4EJIAAAAAwIeQBAAAAAA+hCQAAAAA8CEkAQAAAIAPIQkAAAAAfAhJAAAAAOBDSAIAAAAAH0ISAAAAAPgQkgAAAADAh5AEAAAAAD6EJAAAAADwISQBAAAAgA8hCQAAAAB8CEkAAAAA4ENIAgAAAAAfQhIAAAAA+BCSAAAAAMCHkAQAAAAAPoQkAAAAAPAhJAEAAACADyEJAAAAAHwISQAAAADgQ0gCAAAAAB9CEgAAAAD4EJIAAAAAwIeQBAAAAAA+hCQAAAAA8CEkAQAAAIAPIQkAAAAAfAhJAAAAAOBDSAIAAACAdAlJQ4cO1e67767atWurSZMmGjhwoGbMmBGyzcaNG3XRRRepYcOGqlWrlgYNGqSlS5embJ8BAAAAZLeUhqRx48Y5Aeibb77RyJEjtWXLFh166KFat25d4TaXX365PvjgA7355pvO9n/88YeOPfbYVO42AAAAgCyWFwgEAkoTy5cvdypKFob69eun1atXq3HjxnrllVd03HHHOdtMnz5dXbt21cSJE7XnnnsWe5v5+fmqW7euc1t16tQph0cBAAAAIB3Fmw3Sak6S7axp0KCB8/W7775zqksHH3xw4TZdunRR69atnZAUyaZNm5wH7z8BAAAAQLzSJiQVFBRoyJAh2nvvvdW9e3fnsiVLlqhKlSqqV69eyLZNmzZ1ros2z8nSoXdq1apVuew/AAAAgOyQNiHJ5ib9/PPPeu2118p0O9dff71TkfJOCxcuTNg+AgAAAMh+lZQGLr74Yn344YcaP368WrZsWXh5s2bNtHnzZq1atSqkmmTd7ey6SKpWreqcAAAAACDjKknWM8IC0rvvvqsxY8aoXbt2Idf37t1blStX1ujRowsvsxbhCxYsUN++fVOwxwAAAACyXaVUD7GzznXvvfees1aSN8/I5hJVr17d+XrWWWfpiiuucJo5WAeKSy65xAlI8XS2AwAAAICMagGel5cX8fJnn31WZ555ZuFisldeeaVeffVVp3Nd//799fjjj0cdbheOFuAAAAAASpIN0mqdpGQgJAEAAADI2HWSAAAAACDVCEkAAAAA4ENIAgAAAIB0WycJAFB627ZJX34p/fmntMMO0r77ShUrpnqvAADIXIQkAMhg77wjXXaZtGhR8DJbk/uhh6Rjj03lngEAkLkYbgcAGRyQjjsuNCCZxYvdy+16AABQcoQkAMjQIXZWQYq0iIN32ZAh7nYAAKBkCEkAkIFsDlJ4BSk8KC1c6G4HAABKhpAEABnImjQkcjsAABBESAKADGRd7BK5HQAASVFQIP3wg/Tjj8okhCQAyEDW5tu62OXlRb7eLm/Vyt0OAIBytWyZ9PLL0hlnuJ/W7bqrdOedyiSEJADp4aST3CP7ESNSvScZwdZBsjbfJjwoeecffJD1kgAA5WDLFmn8eOmGG6TevaWmTaXTTpNefNENTDVrStWqKZPkBQKReiNlj/z8fNWtW1erV69WnTp1Ur07AKLxjuy7dJF++y3Ve5PR6yRZBckCEuskAQCSZt486bPPpE8/lcaMkdasCb2+Vy+pf3/3tPfeUpUqyqRswGKyANJLdn9uk3AWhAYMcLvYWZMGG9VgQ+yoIAEAEmrdOmns2GAwmjUr9PpGjaRDD3VDkX1t1kyZjJAEABnOAtH++6d6LwAAWfeh5U8/BUPRhAnS5s2h//nstVewWmTzjipkz0weQhIAAAAAaeVKaeRINxjZKXwdibZtg6HowAOlunWVrQhJAAAAQC7aulWaNClYLZoyJXTYe/Xq0gEHBINRp07R26pmGUISAAAAkCsWLAiGotGjpdWrQ6/v0SMYivbZJ+O60iUKIQkAAADIVuvXu+25LRRZOJo+PfT6Bg2kQw4JNlxo0SJVe5pWCEkAAABAtrDhcr/+GqwWWUDatCl4vTVX2HPPYLVot91oiRoBIQkAAADIZH//LY0a5Yaizz8PXTzPW0DPC0UHHSTVr5+qPc0YhCQAAAAgk2zbJn37bXAI3eTJUkFB8HqbR7TffsFg1LVrzjRcSBRCEgAAAJDurDrktea2qpFVj/y6dQuGon793M50KDVCEgAAAJBuNm6UvvwyWC365ZfQ6+vVkw4+OBiMbEgdEoaQBAAAAKRDw4UZM4KhaNw4acOG4PU2XG6PPdxAdNhh0u67S5U4lE8WnlkAAAAgFWyNIluryAtGtoaRX/PmwVBkVSNr141yQUgCAAAAyqvhwvffB0PRN9+4l3mqVHHnE3nBaKedaLiQIoQkAAAAIFn+/DPYcGHkSGnlytDrO3cOhiLrSFejRqr2FD6EJAAAACBRbOHWCROCwejHH0Ovr1PHXavIa7jQtm2q9hQxEJIAAACAsjRcmD07OITuiy+k9euD19twud69g9WiPn2kypVTuceIAyEJAAAAKIn8fGnMmGC1aN680OubNZMOPTTYcKFx41TtKUqJkAQAAADEUlAgTZ0arBZ9/bW0dWvweqsM7bNPsFrUsycNFzIcIQkAAAAIt3Sp9Pnnbiiyr8uXh16/447BULT//lKtWqnaUyQBIQkAMph1jrUF2a150g47SPvuK1WsmOq9AoAMtHmzWyHyhtD98EPo9RaCDjzQDUUWjtq3T9WeohwQkgAgQ73zjnTZZdKiRcHLWraUHnpIOvbYVO4ZAGSIOXOCocjmGK1dG3r9LrsEq0V9+7rrGCEnEJIAIEMD0nHHuU2V/BYvdi9/6y2CEgAUYSHIus95wci60vlZgwWv4cIhh0hNm6ZqT5FihCQAyMAhdlZBCg9Ixi6zucJDhkgDBjD0DkCOsz+K06YFQ5GtX7RlS/D6SpWkvfYKDqHr1UuqUCGVe4w0QUgCgAxjc5D8Q+wiHRMsXOhuZ3OJASCnWIOFkSODDReWLAm9vl274BC6Aw5wF3cFwhCSACDDWJOGRG4HABnNKkPffBOsFn33XWipvUYNNwx51SLrSkd7bhSDkAQAGca62CVyOwDIOPPnB0PR6NHu4q5+tk6RF4r23luqWjVVe4oMRUgCgAxjbb6ti501aYg0L8k+ILXrbTsAyArr10tjxwaD0YwZodc3bOg2XLBQZF/5lAhlREgCgAxjzRiszbd1sbNA5A9K3giSBx+kaQOADGZ/2H7+ORiKxo931zHy2B+4PfcMVot23ZU/ekgoQhIAZCBr721tviOtk2QBifbfADLOypXSqFHBYPTHH6HXt24dDEW2qGu9eqnaU+QAQhIAZCgLQtbm27rYWZMGG11iQ+z4MBVARti6VZo8ORiK7Ht/abx6dbdFp4UiO3XuTMMFlBtCEgBkMAtEtPkGkDFsfQIvFFnVaNWq0Ot32ilYLbJPfapVS9WeIscRkgAAAJAcGza484m8YPTrr6HX168vHXJIsOGCjRkG0gAhCQAAAIlhw+V++y0YisaNkzZuDF5foYLUp09wCN3uuzNGGGmJkAQAAIDS+/tvd60iLxjZkDq/Fi2CQ+gOOkhq0CBVewrEjZAEAACA+G3bJk2Z4gaiTz+VJk2SCgqC19vCrfvtF6wWdetGwwVkHEISAGQwWzbk8celOXOkDh2kCy+UqlRJ9V4ByDrWjturFI0cKf31V+j1XbsGQ1G/flKNGqnaUyAhCEkAkKGuuUb6z3/cD3U9V10lXXGFdO+9qdwzABnP5hFNmBCsFtnCrn5160oHHxwMRraGEZBFCEkAkKEBadiwopdbYPIuJyghK91zj3TnnVL37lLfvtJee7knWygMZWu4MHNmsFr0xRduZzqPDZezJgteKLLmC5U4jET2ygsE/Kt2ZZ/8/HzVrVtXq1evVp06dVK9OwCi8car22KB06enem/SfoidjWTxV5DCWbOo9esZeocsY+vqWJvoSIcubdu6YckLTj17chBfnNWrpTFjgtWi338Pvd6CpxeKrGrUqFGq9hQo92zAXw8AyDA2BylWQDJ2vW03ZEh57RWQZEuXSqed5gakwYPdg/avv3ZPP/0kzZ/vnl55xd3ePkmwaocXmvbcU2rYUDnNmit8/30wFE2cGPrHxD5VsQVcvWDUowcNF5CzCEkAkGGsSUMitwMy4uDeApIFJRtm98QTUvXq7mVmzRpp8uRgaLKDf6uS2JAxO3m6dAmtNtl5W7cnmy1ZIn3+uRuM7OuKFaHXd+oUDEX77y/VrJmqPQXSCiEJADKMdbFL5HZA2rv7bneonVWH3njDDUh+tWu76+/YyQtVNmzXC012mjHDvcxOzzzjblevnhuYvNC0xx7ubWX6eNyvvgpWi6ZNi/xcecGoXbtU7SmQ1piTBCA9MCcpbsxJQk6xDmu25o4Fn2eflc48s3S3s3Kl9M03wdBklSf7JfGzqpLNZfJXmyxEpPuQs9mzg6HIKmfr1oVe37t3MBTZ46pcOVV7CmRMNiAkAUgPhKSEdLfzXH013e2QBSzY9OolLVoknX669PzziQssW7ZIP/7oDs3zglN44wLTtGloaLLAUa2aUsqGF1oY8oLR3LlF99kaXFgoOuQQqUmTVO0pkHYISdsRkoAMQUhKyDpJVkFinSRkBTs8Ofpo6cMP3Xkz330n1aqV3PtcvNgNTV5wsvu0MOVnVRgLSv7g1Lx5cvfLqmg2bM4CkQUj2zf/ftk+7b13sFq0887ZP9cKKCVC0naEJCBDEJJKPfTOuthZkwabg3ThhQyxQ5Z44AE38Vet6g6Ts4pSKhZUtaDkrzZZ84hwbdoUbT9e1iFty5ZJI0e6wcgaLth5P/uF90LRAQdk/lwqoJwQkrYjJAEZgpAEwPPtt25lxKol9inABRcoLdgh07x5oaHJhuxZpcfPJg1aEwgvNNnX4tqP22O12/WqRdaq28+6zh14YDAY7bhj4h8fkAPyCUkuQhKQIQhJAIy17t5lFzeMDBokvflmejdO8NqPe8HJvq5aVXQ7+9vmrzZ17erOgfLmFdmirnZbflY9s0B02GHuz1AmBsqMkLQdIQnIEIQkAHZIcsIJ0ltvSW3bSj/84LbpziT+9uNecIr0N83amG/YEHpZo0bBhgv2tVmzctttIFfkx5kNWCcJAACkh//+1w1IlSpJr7+eeQHJWMOEbt3c09lnF20/bsFp0iS3/bh1WrEKkVctsgoaDReAtEBIAgAAqWdze4YMCS4ea3N6soXNRzrySPdktm6VZs6UWrSQ6tZN9d4BiCClH1eMHz9e//jHP9S8eXPl5eVpxIgRIdefeeaZzuX+02H2SQsAAMgea9e6w+w2bXKDxOWXK6tZpcwqTQQkIG2lNCStW7dOO++8sx577LGo21go+vPPPwtPr776arnuIwAASLKLLpJmzHArK889x5AzALk93O7www93TrFUrVpVzZi4CABAdnr+eemFF9xg9MorbvMCAEixtP+oZuzYsWrSpIk6d+6sCy64QCtt8mMMmzZtcrpW+E8AACANWdc3WwHZ3Hab1K9fqvcIANI/JNlQuxdeeEGjR4/WPffco3HjxjmVp23btkX9maFDhzpt/bxTq1atynWfAQBAHKz9tc1Dsi5vtkjq9deneo8AIP3WSbKmDO+++64GDhwYdZu5c+eqQ4cOGjVqlA466KColSQ7eaySZEGJdZKANMc6SUBuueACafhwqUkTaepUaYcdUr1HAHJAfpzrJKV1JSlc+/bt1ahRI82ePTvmHCZ7wP4TAABII2+84QYk+3DkpZcISADSTkaFpEWLFjlzknbgjykAAJlp7lzpnHPc76+7TjrkkFTvEQCkV3e7tWvXhlSF5s2bp6lTp6pBgwbO6bbbbtOgQYOc7nZz5szRNddcox133FH9bWVqAACQWTZvlk480ca7SHvvLf3736neIwBIfCVp8+bNmjFjhrbaytGlMGXKFO2yyy7OyVxxxRXO9zfffLMqVqyoH3/8UUcffbQ6deqks846S71799aXX37pDKkDAAAZxipHU6ZIDRpItu6hLaoKAGmoVH+d1q9fr0suuUTP29oGkmbOnOnMF7LLWrRooevsj2Ac9t9/f8XqG/HZZ5+VZvcAAEC6+eAD6YEH3O+ffVai+yyAbKskXX/99Zo2bZqzhlG1atUKLz/44IP1+uuvJ3L/AABAplu4UDrzTPf7IUOko49O9R4BQOIrSSNGjHDC0J577um07vbstNNOztwhAAAAhw3JP/lk6a+/pN12k+65J9V7BADJqSQtX75cTWxdgzDr1q0LCU0AACDH3XKL9NVXUu3a0muvSVWqpHqPACA5IWm33XbTRx99VHjeC0ZPP/20+vbtW5qbBAAA2WbkSGnoUPf7p5+WOnRI9R4BQPKG29111106/PDD9euvvzqd7R566CHn+6+//lrjxo0rzU0CAIBssmSJdNppkjVoOu886YQTUr1HAJDcStI+++zjrGdkAalHjx76/PPPneF3EydOdNp0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Wjhe8+w0d+5cPfHEE+rYsaM+++wzXXDBBbr00kv1/PPPh7xusf6W21cLWH6VKlVyPlQpyXsD5eO6667TSSed5HzIUblyZScY2994m3tieM2zX3m+xtG24T2Q/iqlegeATKgs/Pzzz84njcheCxcu1GWXXaaRI0c6k2uROx+C2CfFd911l3PeDpjt93348OEaPHhwqncPSfDGG2/o5Zdf1iuvvKKddtpJU6dOdUKSTfDnNQfgoZKUJI0aNVLFihWLdL6y882aNUvZfqFkLr74Yn344Yf64osv1LJly8LL7TW0IZWrVq2K+vra10ivv3ddrG2sk45120H5seF0y5Ytc7rO2aeFdho3bpwefvhh53v75I/XPPtYZ6tu3bqFXNa1a1enS6H/dYv1t9y+2nvHzzoaWmeskrw3UD6s46RXTbLhsaeffrouv/zywgoyr3n2K8/XONo2vAfSHyEpSWxYTu/evZ1xz/5PLO183759U7pvKJ7N87SA9O6772rMmDFOq1g/e21tmIb/9bUxyHZg5b2+9vWnn34K+SNrVQo7GPYOymwb/2142/AeKX8HHXSQ83rZp8reySoMNgTH+57XPPvYMNrw9v42V6VNmzbO9/a7bwcz/tfMhkbanAT/627h2YK2x/5u2N98m+PgbWMtiW1em/9179y5s+rXr5/0x4mg9evXO/NK/OxDTXu9DK959ivP15i/+RksYS0gELEFuHVKee6555wuKeeee67TAtzf+Qrp6YILLnBag44dOzbw559/Fp7Wr18f0g7a2oKPGTPGaQfdt29f5xTeDvrQQw912ohbi+fGjRtHbAd99dVXO53SHnvsMdpBpxF/dzvDa56d7d4rVarktIWeNWtW4OWXX3Zen5deeimkVbD97X7vvfcCP/74Y2DAgAERWwXvsssuThvxCRMmOB0S/a2CrXOWtQo+/fTTnVbB9v+D3Q/toMvf4MGDAy1atChsAW4toq1Vv3We9PCaZ0enUluKwU52uPuf//zH+f73338v19fYWoDb35j77rvP+Zt/yy230AI8QxCSkszWQLGDKlsvyVqCW699pD/7gxrpZGsneewP6YUXXui0/7Q/isccc4wTpPzmz58fOPzww511E+w/4SuvvDKwZcuWkG2++OKLQK9evZz3SPv27UPuA+kVknjNs9MHH3zghFv7UKtLly6BJ598MuR6axd80003OQdDts1BBx0UmDFjRsg2K1eudA6ebL0da/n+z3/+0zlI87O1WKzduN2GHaTbQRrKX35+vvN7bf83V6tWzfkdtPV0/G2cec0zn/2djfT/uIXk8n6N33jjjUCnTp2cv/m2BMRHH32U5EePRMizf1JdzQIAAACAdMGcJAAAAADwISQBAAAAgA8hCQAAAAB8CEkAAAAA4ENIAgAAAAAfQhIAAAAA+BCSAAAAAMCHkAQAAAAAPoQkAAAAAPAhJAEAMs7EiRNVsWJFHXnkkaneFQBAFsoLBAKBVO8EAAAlcfbZZ6tWrVr63//+pxkzZqh58+YRt7P/4rZt26ZKlSqV+z4CADIXlSQAQEZZu3atXn/9dV1wwQVOJem5554rvG7s2LHKy8vTJ598ot69e6tq1aqaMGGCCgoKNHToULVr107Vq1fXzjvvrLfeeqvw5yxInXXWWYXXd+7cWQ899FCKHiEAINX4aA0AkFHeeOMNdenSxQkyp512moYMGaLrr7/eCUee6667Tvfdd5/at2+v+vXrOwHppZde0vDhw9WxY0eNHz/e+dnGjRtrv/32c0JUy5Yt9eabb6phw4b6+uuvde6552qHHXbQCSeckNLHCwAofwy3AwBklL333tsJLpdddpm2bt3qBBkLN/vvv79TSTrggAM0YsQIDRgwwNl+06ZNatCggUaNGqW+ffuGDNlbv369XnnllYj3c/HFF2vJkiUhFScAQG6gkgQAyBg2/2jy5Ml69913nfM21+jEE0905iZZSPLstttuhd/Pnj3bCUOHHHJIyG1t3rxZu+yyS+H5xx57TM8884wWLFigDRs2ONf36tWrXB4XACC9EJIAABnDwpBVj/yNGmxAhM09evTRRwsvq1mzZsgcJvPRRx+pRYsWIbdnP2dee+01XXXVVbr//vudalPt2rU1bNgwTZo0qRweFQAg3RCSAAAZwcLRCy+84ASZQw89NOS6gQMH6tVXX3XmKoXr1q2bE4asQmTzjyL56quvtNdee+nCCy8svGzOnDlJeBQAgExASAIAZIQPP/xQf//9t9OFrm7duiHXDRo0yKkyWfUnnFWFrEp0+eWXOw0a9tlnH61evdoJRnXq1NHgwYOdZg4WwD777DOnw92LL76ob7/91vkeAJB7aAEOAMgIFoIOPvjgIgHJC0lTpkzRjz/+GPFnb7/9dt10001Ol7uuXbvqsMMOc4bfeSHovPPO07HHHuvMb+rTp49WrlwZUlUCAOQWutsBAAAAgA+VJAAAAADwISQBAAAAgA8hCQAAAAB8CEkAAAAA4ENIAgAAAAAfQhIAAAAA+BCSAAAAAMCHkAQAAAAAPoQkAAAAAPAhJAEAAACADyEJAAAAABT0/5voUGAOhb33AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a DataFrame to sort values together\n",
    "plot_df = pd.DataFrame({\n",
    "    'area': X_test['area'],\n",
    "    'actual_price': y_test,\n",
    "    'predicted_price': y_pred\n",
    "})\n",
    "\n",
    "#Sortting by 'area' so the line doesn’t zigzag\n",
    "plot_df = plot_df.sort_values(by='area') \n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.scatter(plot_df['area'], plot_df['actual_price'], color='blue', label='Actual Price')\n",
    "plt.plot(plot_df['area'], plot_df['predicted_price'], color='red', label='Predicted Price')\n",
    "plt.xlabel('Area')\n",
    "plt.ylabel('Price')\n",
    "plt.title('House Price Prediction (Actual vs Predicted)')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ed58440-b00d-4a47-b830-977100a9b466",
   "metadata": {},
   "source": [
    "\n",
    "MSE\t9.69\n",
    "R² Score\t0.494  Model explains ~49.4% of variance in house prices "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc1b187c-ee5b-4ae7-ba32-a087d86ffc58",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
